-> Create an object to hold Network scripts.
-> place NetSocket and CNetItemTracker and CNetBPS(optional, shows BPS speed display) on.
-> later, fill out the item tracker list, but this is not needed yet (for spawnable items)

edit both player objects... the PlayerCharacter, and the prefab accessed through Systems>Characters Manager>PlayerCharacter
- place scripts in this order:
-> CNetId
-> CNetInfo
-> CNetAnimatorMonitor
 * Copy the two graphs (Forward/horizontal movement) from the standard animator monitor
 * Delete the old animator monitor, as we have subclassed it
-> CNetCharacter
-> CNetMecanim

-> Reference the CNet assembly, inside the TwoNibble assembly definition

-> Modify Assets\_IMPUNES\Scripts\CharacterController\UMACharacterBuilder.cs:
- add a 'using CNet' definition.
- modify this code:
	if (m_AddHealth)
	{
		data.gameObject.AddComponent<Opsive.UltimateCharacterController.Traits.AttributeManager>();
		NetSocket.Instance.BuildHealthMonitors(data.gameObject);
		data.gameObject.AddComponent<Opsive.UltimateCharacterController.Traits.CharacterHealth>();
		data.gameObject.AddComponent<Opsive.UltimateCharacterController.Traits.CharacterRespawner>();
	}
- note we added BuildHealthMonitors.
- modify this code, too:
	Debug.Log("Finished Building character");
	NetSocket.Instance.BuildPlayer(data.gameObject);
	isCreated = true;

-> Modify C:\imp\Assets\_IMPUNES\Scripts\Systems\CharactersManager.cs
 - add 'using CNet'.
 - Start() should start like this:
	NetSocket.Instance.RegisterCharacterManager(this.CreateRemoteAvatar);

	UMAAssetIndexer index = UMAAssetIndexer.Instance;
	races = index.GetAllAssets<RaceData>();
 - we register the createremoteavatar function.
 - add this function:
	public GameObject CreateRemoteAvatar(Vector3 position, float heading)
	{
		var dynamicCharacterAvatar = CreateDynamicCharacter(position, heading, CharacterFeatures.Pedestrian, CharactersManager.CharacterQuality.Full);
		if (!dynamicCharacterAvatar) {
			Debug.Log("NewUser rejected");
			return null;
		}

		var characterBuilder = dynamicCharacterAvatar.GetComponent<UMACharacterBuilder>();
		//characterBuilder.m_Build = false;
		characterBuilder.m_AIAgent = false;
		characterBuilder.m_AssignCamera = false;
		characterBuilder.m_AddItems = true;

		Application.backgroundLoadingPriority = UnityEngine.ThreadPriority.Low;
		dynamicCharacterAvatar.BuildCharacter();

		return dynamicCharacterAvatar.gameObject;
	}

You're done! Play to commence.
